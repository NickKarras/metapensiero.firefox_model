# -*- coding: utf-8 -*-
# :Progetto:  metapensiero.firefox_places --
# :Creato:    ven 19 set 2014 19:28:53 CEST
# :Autore:    Alberto Berti <alberto@metapensiero.it>
# :Licenza:   GNU General Public License version 3 or later
#

from metapensiero.firefox_places.tests import BaseTestCase, ff


class ModelTestCase(BaseTestCase):

    def _getplace(self, url, bm=True):
        q = self.s.query(ff.Place).filter(ff.Place.url.like('%{0}%'.format(url)))
        if bm:
            q = q.filter(ff.Place.bookmarks.any())
        return q

    def _gettag(self, name):
        q = self.s.query(ff.Tag).filter(ff.Tag.title == name)
        return q

    def test_connect(self):

        assert hasattr(self, 'e')
        assert hasattr(self, 's')

    def test_places_lastdate(self):
        import datetime
        p = self.s.query(ff.Place).get(9)
        assert isinstance(p.last_visit_date, datetime.datetime)

    def test_timestamp_type(self):
        import datetime, time

        t = ff.UTCTimestamp()
        # timestamp generated by FF corresponding to (2014, 9, 19, 14, 9, 12, 469651)
        int_test_value = 1411128552469651
        dt_test_value = datetime.datetime(2014, 9, 19, 12, 9, 12, 469651) # UTC
        assert t.process_result_value(int_test_value, None) == dt_test_value

        assert t.process_bind_param(dt_test_value, None) == int_test_value


    def test_place_bookmarks_relation(self):

        # get the bookmarked places for slashdot
        q = self._getplace('slashdot.org')
        sdp = q.first()
        assert len(sdp.bookmarks) == 3 # two bms linked to a tag, one
        # to a container

        assert isinstance(sdp.bookmarks[0].parent, ff.Folder)
        assert isinstance(sdp.bookmarks[1].parent, ff.Tag)
        assert isinstance(sdp.bookmarks[2].parent, ff.Tag)

        assert sdp.bookmarks[1].parent.title == 'news'
        assert sdp.bookmarks[2].parent.title == 'nerd'


    def test_place_tags_relation(self):

        # get the bookmarked places for slashdot
        q = self._getplace('slashdot.org')
        sdp = q.first()
        assert len(sdp.tags) == 2

    def test_tags(self):

        tags = self.s.query(ff.Tag)
        assert tags.count() == 9
        js = tags.filter_by(title='JavaScript').first()
        assert len(js.children) == 2
        assert len(js.places) == 2
